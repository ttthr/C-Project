*액터 ( GameObject)
- 컴포넌트를 가진다.

*모드
- 많이 사용되는 물체를 나열 해놓은 곳

*뷰포트,월드아웃라이너
- 뷰포트 : 물체로 보여줌
- 월드아웃라이너 : 목록으로 보여줌

*콘텐츠 리소스
- 프로젝트 파일들을 보여준다.

*모델링 올릴떄는 임포트 눌러서 한다
 - 모델링을 임포트하면 머터리얼(셰이더)이 자동으로 생긴다.
 - 메모리에만 모델링, 머터리얼을 올린다.
 - 저장해야 데이터로 들어간다.
 - 원본 파일은 아니다.
 - 엔진 개발 과정에서만 사용하고 패키지 할 때 이용한다.
 - 프로젝트 패키지 할때 플랫폼에 맞게 좋게 바뀌어서 들어간다.

* 마우스 우클릭 / 좌클릭 드래그 다르다.

* 각도순서
   - picth , yaw , roll 

* 머티리얼 만들기
   - 외곽선에 하얗게 깔리는게 프레넬 ( 림라이트 == 프레넬 )
   - 3 + 마우스 왼쪽클릭 ( float3 개 짜리 생긴다.)
   - 1 ,2 , 3 ,4 다된다. ( 숫자마다 float 갯수로 생김 )
   - 메탈릭  ( 0 ~ 1 사이)   : 1에갈수록 완전 금속
   - 러프니스 ( 0 ~ 1 사이) : 1갈수록 거침

* 이미시브 컬러
  - 1 이상의 값을 수용을 한다.
  - 과장된 효과를 낼 수 있다.

* 디졸브 값
  - 

2019.07.17
* 머티리얼 펑션만들어보기
   - fuctioninput 만들어서 한다.

* Rim , Dissovle 
  - 함수로 빼기

* 새 레벨 만들기
  : Ctrl + N 
* 레벨 저장 
  : Ctrl + S

* 빌드
   - 빌드를 하게되면 Step02_BulitData에 들어감( 맵 애름이 Step02 )

* 레퍼런스 뷰어
  : Step02가 Step02_BulitData 사용한다는 것을 보여줌
  /Game/... ( 상대경로 이름찾을때 게임부터 시작하면 된다.)
  /Engine/..(엔진 설치 경로를 알려 준다.)

* 레벨 
  - 미리 배치된 오브젝트들을 모두 모아놓은게 레벨.

* 월드
  - 가상의 공간 ( 레벨을 까는 곳 )
  - (월드(레벨)).
  - 월드에 배치됬으면 다 "액터"이다.

// 계층 구조
UObject -> AActor -> APawn

*라이팅만 빌드
  -Swarm Agent가 생긴다.
  - 레벨 정보가 Swram Agent에 보내져서 처리해줌 ( 라이트 맵을 구워줌 )

* 디렉셔널 라이트
  - 방향만 의미가 있음
  - W : 이동
  - E : 회전
  - R : 스케일

* 애트머스페릭 포그
  - 기본 
  - 디테일 -> Light 고급옵션에서 바닥이랑 연동시킬수잇따.
* 익스포넨셜 하이트 포그 
  - 고저가 차이나는 맵에
* 모빌리티
  - 물체를 나누는 기준
  - 스태틱 : 고정  (사전에 한번 그리고 안그림) , ( 빌드할때 한번 계산하고 나중엔 버려져서 실행중엔 이득이다.)
  - 스테이셔너리 :  반 고정 ( 반 고정했다가 나머지 부분을 덧칠해서 그림 ) 
  - 무버블 : 움직임 ( 사전에 안그림)

* 모빌리티 빛 계산에서 ( 간접광 추출할 때 )
  - 스태틱 : 조절 불가 ( 그림파일 같은거로 저장됨 ?)
  - 스테이셔너리 :  반 정도 조절 가능 ( 4개 제한 )
  - 무버블 : 완전 조절 가능 
  - Indirect Lighting 인것을 쓰면 빌드시에만 영향을 미치지만( 실행시간 영향 x ) 빌드가 오래 걸릴 수 있다.
  - 라이트는 스태틱으로 도배하는 것이 좋다 ( 기술이름: 라이트 프로브 , 구면조화 )
  - 볼류매트릭 라이트맵 기술 덕분에 스태틱으로 조명을 설정해도 움직이는 물체에 빛이 표현 된다.
  - 레이트레이스 

* 레벨 나누기 ( 나중에 합칠 것 )
  - 창->개발자 툴 -> 액터병합 으로 무언가를합치고 바꿀수있다.
  - 피봇 만들기 (임시)
    : 할것 누르고 피벗 표시->소켓생성 
  - 소켓생성을 이용하여 무기를 손에 붙인다던가 하는 것을 할 수 있다.( *************************** )
* 콘텐츠창에서 "이주"를 눌러서 소스파일들을 옴길 수 가 있다.

* 셋팅->프로젝트셋팅-> 맵 & 모드 -> 최근에했던 레벨 설정해두면 다시 키면 그 레벨로 뜬다.

2019.7.18
* 렌더타겟만들어보기 
  - 신규추가 -> 렌더타깃
  - 머티리얼 -> 베이스컬러에 씬그린걸 넘겨주면 나온다.
  - T + 왼쪽클릭 ( 텍스쳐 샘플러 ) 
  - 머터리얼 텍스쳐에 렌더타깃을 넣어준다.
  - 카메라를 플레이어 한테 붙여줘야 한다.
  - 뷰포트 탭을 누른다. ( 작업공간 )
  - 컴포넌트를 추가한다.
  - CameraBoom 클릭하고 
  - SceneCaptureComponent2D 추가
  - Scene Capture 에서 Texture Target 선택 -> T_Scene 을 넣어준다.
  - 머터리얼을 어딘가에 추가하면 나온다.
2019.7.19 ( DX를 마치면서 ) 
* 알레고리드믹 물리 기반 렌더링
* ShaderX 책
* Unreal Source 코드
-----언리얼 시작------
*레벨 합쳐보기
 - 디폴트로 만들고 바닥을 지우고 저장하기.(BlockMain)
 - 기본창에 없는 메뉴 띄우기
 - 창 -> 레벨 ( 월드 아웃라이너 옆에 뜬다.)
 - 기존 레벨 추가 누르기
 - level1 , level2 추가 
 - 월드아웃라이너로 가면 보인다.
 - 같이 겹쳐보이는데 옴기면 된다 ( 폴더 정리한 것을 다 선택하고 )
 - 합치고나서 레벨에서 다 선택 후 -> 스트리밍 방법 변경 - >항상로드로 바꾼다.
 - 각각 레벨을 꾸미면 거기만 바뀐다. ( 개 좋 )
--------------------------------------2019.07.22--------------------------------------
* 추천 책 : Real Time Rendering
            : 디지털라이팅렌더링 
* 언리얼 
  - 캐릭터 바꿔보기 
  - GamePlayFrameWork 라는 단계가 있다.
  - Play를 누르면 월드 공간을 배치하고 게임모드,플레이어컨트롤러,캐릭터를 거쳐 플레이를 할 수 있다.

  - 두 물체를 한번에 움직이고 싶으면 선택하고 그룹핑 하면 된다 ( 꺠고 싶으면 언그룹 하면 댄다. ) 

* 블루 프린트 클래스 만들어보기
  - Actor - > Pawn -> character ( 상속 구조 : Actor가 최상위 )
  - 분수 만들어보기(static mesh 배치 ) /  에어리어 라이트
* 이벤트 그래프 해보기
  - 옵저버 패턴 ( Event ) , FSM 패턴( 유한 상태 기계 ) 공부하기
  - Event로 많이 처리한다. (멀티 플레이일 때)
  - BeginPlay 이벤트 ( 처음 한번 호출 된다. )
    - PrintString으로 글자 찍어 볼 수 있다.
    - 블루프린트 배치에 따라 호출 횟수 달라짐
  - ActorBeginOverlap 이벤트 ( 물체가 겹칠 때 호출 된다. )
  - Tick 이벤트 ( 반복작업 할때 사용한다. / Delta Seconds ( 초단위로 시간 계산 ) ) 
    - 회전시켜보기
    - 구조체 핀분할로 x,y,z 컨트롤 할 수 있다.
    - Delta Seconds를 이용하여 프레임시간을 이용하여 돌린다.
  
* 캐릭터 블루프린트 클래스 만들어보기
  - Charater로 블루프린트 만들기
  - Mesh : 스켈레탈 메시
  - CharacterMovement ( 컴포넌트 == 부품(동작을 할 수 있는) ) - 걸어다니는 기능이 많이 들어있는 컴포넌트
  - Mesh 선택하기
  - CapsuleComponent( 충돌체 컴포넌트 ) - 디테일에서 높이를 알수있다 
  - 높이 맞춰주고, 좌표축 맞춰주기 ( 앞방향으로 )

* 게임모드 블루프린트 만들기
  - Game Mode Base 만들기
  - 규칙 같은 것을 설정하는 공간이다. ( 규칙을 새로 만드는 것 )
  - 디테일 - > Default Pawn Class -> 만든 블루프린트 클래스 선택해주기 ( 플레이어 )
  - 월드 세팅에 세팅해주기 
  - 캐릭터에 Camera 추가해줘서 보이게 만들어 준다.

* 플레이어 컨트롤러 
  - 입력 - > 플레이어 컨트롤러 -> 게임 내 캐릭터(Pawn,Character )
  - 빙의할 수 있다,( 한번에 한 캐릭터만 ( 빙의했다가 다른 것에 빙의할 수 있다. )
  - 카메라를 관리 한다.
* 입력처리해보기
  - 프로젝트 세팅 -> 입력 
  - Axis    Mapping : 연속성
  - Action Mapping :단발성 
  - 왼쪽 오른쪽 : -1 , 1 값 셋팅한 이벤트를 플레이어 이벤트그래프에 추가해준다.

* 카메라 설정바꾸기
  - SpringArm 추가
  - SpringArm에 Camera를 상속

* 회전해보기
  - Turn 이벤트
  - LookUp 이벤트
  - SpringArm-> Camera Settings -> Use Pawn Control Rotation 체크하면 컨트롤러를 따라가고 아니면 플레이어를 따라간다.
  - 컨트롤러 로테이션을 가지고 Z축을 설정해주고 x,y를 0으로 초기화해주면 수직으로 섯을떄도 움직이게 된다.

* 애니메이션해보기
   - 리타겟팅 하는방법 : 공부하기!
   - 뼈대를 연다.
   - 리타깃 매니저를 연다.
   - 릭 선택 -> 인간형 릭 선택 ( 뼈대 위치를 소스와 타깃을 맞춰줘야한다. / 언리얼에서 쓰는것을 쓰면 그냥 매칭 된다. )
 
* 애니메이션 블루프린트 만들기
  - 다운 받은 메쉬 이용하기
  - 경로 맞춰서 열어주기 
  - 최종 애니메이션 포즈에 넣어줘야함
  - 에셋브라우저 열어서 쓰고싶은거 드래그해서 넣고 이어준다.
  - 우클릭->Blend -> bool로 포즈를 블렌딩합니다 선택
  - 디버그 필터 -> 인스턴스 프리뷰하면 흘러가는걸 볼 수 있다.
  - 런 ( true ) / idle( false)
  - Active 밸류값을 써서 실행중에 변경을 할 수 있다.
  - 변수를 만든다.
  //- 이동속도 지정 0이면 달리기 이상이면 아이들
* 캐릭터 블루프린트 가기 
  - Anim 클래스에 우리가 만든거 넣기
  - 이벤트 그래프에서 Tick이벤트 열기
  - GetVelocity 얻어 오기 
  - vectorlenghtxy 얻어와서 이어주기
  - mesh 컴포넌트 긁어오기 
  - mesh에 Get Anim Instance 이어주기 ( 실행중에 사용할 실제 물체 이름 )
  - to animbp -> character anim bp로 형변환
  - Tick이랑 이어주기
  - As Character Anim Bp - > 이동속도 Set 연결
  - velocity 연결해주기 이동속도 anim에
* 회전
  - 캐릭터 무브먼트에서 orient Rotation to Movement 체크해주기

* 무기만들기
  - 블루 프린트 클래스 추가
  - 스켈레탈 메시 추가
  - 메쉬 추가
  - 콜리전 추가 ( 크기 맞게 조정 )
  - 콜리전 누르고 On Component Begin Overlap 추가 ( 충돌반응했을때 언리얼이 실행해줌 )
  - AttachTo컴포넌트 추가하기 ( 웨폰 이벤트 그래프에서 )
  - other actor(부딪힌애) -> 캐릭터로 형변환 - AttachTo컴포넌트 연결
  - 캐릭터의 GetMesh() - > AttachTo컴포넌트에 Parent에 붙임 
  - 물체 배치
  - 캐릭터 스켈레톤으로 간다.
  - 손 스켈레톤아래에 소켓추가(무기위치 이런식으로)
  - 손바닥에 무기위치 설정해주기 
  - 무기위치 우클릭 ( 프리뷰에셋으로 칼 잡은거 볼수 있다.)
  - AttachTo컴포넌트에 소켓네임에 만든 소켓이름 넣어주기
  - snap to target
  - SetActorTransform 추가 ( 구조체 핀분할 한뒤 이어주기)
  